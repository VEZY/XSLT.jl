var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = XSLT","category":"page"},{"location":"#XSLT","page":"Home","title":"XSLT","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for XSLT.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [XSLT]","category":"page"},{"location":"#XSLT.Xptr","page":"Home","title":"XSLT.Xptr","text":"Xptr\n\nA pointer to an xsltPtr. This is a trick to make a xsltStylesheetPtr and xmlDocPtr  pointers. \n\n\n\n\n\n","category":"type"},{"location":"#XSLT.xsltPtr","page":"Home","title":"XSLT.xsltPtr","text":"xsltPtr\n\nA buffer structure used for temporary storage. The idea is to map this struct to other structs in libxslt.\n\nI stole this from LightXML.jl. See their implementations of the xmlBuffer  here.\n\n\n\n\n\n","category":"type"},{"location":"#XSLT.file_xslt_apply-Tuple{Any, Any, Vector{String}}","page":"Home","title":"XSLT.file_xslt_apply","text":"file_xslt_apply(file, xslt, params::Vector{String})\n\nApply the stylesheet xslt to the XML file with the given params.\n\n\n\n\n\n","category":"method"},{"location":"#XSLT.xmlFreeDoc-Tuple{Ptr{XSLT.xsltPtr}}","page":"Home","title":"XSLT.xmlFreeDoc","text":"xmlFreeDoc(res::Xptr)\n\nFree the memory allocated to the document res.\n\n\n\n\n\n","category":"method"},{"location":"#XSLT.xmlParseFile-Tuple{String}","page":"Home","title":"XSLT.xmlParseFile","text":"xmlParseFile(filename::String)\n\nParse an XML file into a document.\n\n\n\n\n\n","category":"method"},{"location":"#XSLT.xsltApplyStylesheet-Tuple{Ptr{XSLT.xsltPtr}, Ptr{XSLT.xsltPtr}, Vector{String}}","page":"Home","title":"XSLT.xsltApplyStylesheet","text":"xsltApplyStylesheet(xslt::Xptr, doc::Xptr, params::Vector{String})\n\nApply the stylesheet xslt to the document doc with the given params.\n\n\n\n\n\n","category":"method"},{"location":"#XSLT.xsltFreeStylesheet-Tuple{Ptr{XSLT.xsltPtr}}","page":"Home","title":"XSLT.xsltFreeStylesheet","text":"xsltFreeStylesheet(cur::Xptr)\n\nFree the memory allocated to the stylesheet cur.\n\n\n\n\n\n","category":"method"},{"location":"#XSLT.xsltParseStylesheetFile-Tuple{String}","page":"Home","title":"XSLT.xsltParseStylesheetFile","text":"xsltParseStylesheetFile(filename::String)\n\nParse an XSLT file into a stylesheet.\n\n\n\n\n\n","category":"method"},{"location":"#XSLT.xsltSaveResultToString-Tuple{Ptr{XSLT.xsltPtr}, Ptr{XSLT.xsltPtr}}","page":"Home","title":"XSLT.xsltSaveResultToString","text":"xsltSaveResultToString(xml::Xptr, xslt::Xptr)\n\nReturn the transformed XML file (xml) to a string considering an xslt transformation.  The xslt is given so that output-related information contained in the stylesheet, such as the encoding to be used, is used in output.\n\nSee doc and tutorial here: https://gnome.pages.gitlab.gnome.org/libxslt/tutorial2/libxslt_pipes.html\n\nReturns a tuple of two: the output string and its length.\n\n\n\n\n\n","category":"method"}]
}
